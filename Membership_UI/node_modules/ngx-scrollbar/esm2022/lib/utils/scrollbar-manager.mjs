import { Injectable, inject, signal, PLATFORM_ID } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { NG_SCROLLBAR_POLYFILL } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
const scrollTimelinePolyfillUrl = 'https://flackr.github.io/scroll-timeline/dist/scroll-timeline.js';
export class ScrollbarManager {
    constructor() {
        this.isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this._polyfillUrl = inject(NG_SCROLLBAR_POLYFILL, { optional: true }) || scrollTimelinePolyfillUrl;
        this.document = inject(DOCUMENT);
        this.window = this.document.defaultView;
        this.scrollTimelinePolyfill = signal(null);
        if (this.isBrowser && (!this.window['ScrollTimeline'] || !CSS.supports('animation-timeline', 'scroll()'))) {
            this.initPolyfill();
        }
    }
    async initPolyfill() {
        try {
            // Create a script element
            const script = this.document.createElement('script');
            script.src = this._polyfillUrl;
            // Wait for the script to load
            await new Promise((resolve, reject) => {
                script.onload = resolve;
                script.onerror = reject;
                this.document.head.appendChild(script);
            });
            // Once loaded, access and execute the function attached to the window object
            if (this.window['ScrollTimeline']) {
                this.scrollTimelinePolyfill.set(this.window['ScrollTimeline']);
            }
            else {
                console.error('[NgScrollbar]: ScrollTimeline is not attached to the window object.');
            }
        }
        catch (error) {
            console.error('[NgScrollbar]: Error loading ScrollTimeline script:', error);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ScrollbarManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ScrollbarManager, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ScrollbarManager, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdXRpbHMvc2Nyb2xsYmFyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFrQixXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQUc5RCxNQUFNLHlCQUF5QixHQUFXLGtFQUFrRSxDQUFDO0FBRzdHLE1BQU0sT0FBTyxnQkFBZ0I7SUFZM0I7UUFWaUIsY0FBUyxHQUFZLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBRXBFLGlCQUFZLEdBQVcsTUFBTSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLElBQUkseUJBQXlCLENBQUM7UUFFdEcsYUFBUSxHQUFhLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV0QyxXQUFNLEdBQVcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFFM0MsMkJBQXNCLEdBQXVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUdqRixJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixDQUFDO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZO1FBQ2hCLElBQUksQ0FBQztZQUNILDBCQUEwQjtZQUMxQixNQUFNLE1BQU0sR0FBc0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEUsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBRS9CLDhCQUE4QjtZQUM5QixNQUFNLElBQUksT0FBTyxDQUFRLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUMzQyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztnQkFDeEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztZQUVILDZFQUE2RTtZQUM3RSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDO2dCQUNsQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLENBQUM7aUJBQU0sQ0FBQztnQkFDTixPQUFPLENBQUMsS0FBSyxDQUFDLHFFQUFxRSxDQUFDLENBQUM7WUFDdkYsQ0FBQztRQUNILENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxxREFBcUQsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5RSxDQUFDO0lBQ0gsQ0FBQzs4R0F4Q1UsZ0JBQWdCO2tIQUFoQixnQkFBZ0IsY0FESCxNQUFNOzsyRkFDbkIsZ0JBQWdCO2tCQUQ1QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIGluamVjdCwgc2lnbmFsLCBXcml0YWJsZVNpZ25hbCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQsIGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgTkdfU0NST0xMQkFSX1BPTFlGSUxMIH0gZnJvbSAnLi4vbmctc2Nyb2xsYmFyLm1vZGVsJztcclxuaW1wb3J0IHsgU2Nyb2xsVGltZWxpbmVGdW5jIH0gZnJvbSAnLi9jb21tb24nO1xyXG5cclxuY29uc3Qgc2Nyb2xsVGltZWxpbmVQb2x5ZmlsbFVybDogc3RyaW5nID0gJ2h0dHBzOi8vZmxhY2tyLmdpdGh1Yi5pby9zY3JvbGwtdGltZWxpbmUvZGlzdC9zY3JvbGwtdGltZWxpbmUuanMnO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIFNjcm9sbGJhck1hbmFnZXIge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGlzQnJvd3NlcjogYm9vbGVhbiA9IGlzUGxhdGZvcm1Ccm93c2VyKGluamVjdChQTEFURk9STV9JRCkpO1xyXG5cclxuICByZWFkb25seSBfcG9seWZpbGxVcmw6IHN0cmluZyA9IGluamVjdChOR19TQ1JPTExCQVJfUE9MWUZJTEwsIHsgb3B0aW9uYWw6IHRydWUgfSkgfHwgc2Nyb2xsVGltZWxpbmVQb2x5ZmlsbFVybDtcclxuXHJcbiAgcmVhZG9ubHkgZG9jdW1lbnQ6IERvY3VtZW50ID0gaW5qZWN0KERPQ1VNRU5UKTtcclxuXHJcbiAgcmVhZG9ubHkgd2luZG93OiBXaW5kb3cgPSB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG5cclxuICByZWFkb25seSBzY3JvbGxUaW1lbGluZVBvbHlmaWxsOiBXcml0YWJsZVNpZ25hbDxTY3JvbGxUaW1lbGluZUZ1bmM+ID0gc2lnbmFsKG51bGwpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGlmICh0aGlzLmlzQnJvd3NlciAmJiAoIXRoaXMud2luZG93WydTY3JvbGxUaW1lbGluZSddIHx8ICFDU1Muc3VwcG9ydHMoJ2FuaW1hdGlvbi10aW1lbGluZScsICdzY3JvbGwoKScpKSkge1xyXG4gICAgICB0aGlzLmluaXRQb2x5ZmlsbCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgaW5pdFBvbHlmaWxsKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gQ3JlYXRlIGEgc2NyaXB0IGVsZW1lbnRcclxuICAgICAgY29uc3Qgc2NyaXB0OiBIVE1MU2NyaXB0RWxlbWVudCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgIHNjcmlwdC5zcmMgPSB0aGlzLl9wb2x5ZmlsbFVybDtcclxuXHJcbiAgICAgIC8vIFdhaXQgZm9yIHRoZSBzY3JpcHQgdG8gbG9hZFxyXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZTxFdmVudD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSByZXNvbHZlO1xyXG4gICAgICAgIHNjcmlwdC5vbmVycm9yID0gcmVqZWN0O1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIE9uY2UgbG9hZGVkLCBhY2Nlc3MgYW5kIGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3cgb2JqZWN0XHJcbiAgICAgIGlmICh0aGlzLndpbmRvd1snU2Nyb2xsVGltZWxpbmUnXSkge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsVGltZWxpbmVQb2x5ZmlsbC5zZXQodGhpcy53aW5kb3dbJ1Njcm9sbFRpbWVsaW5lJ10pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tOZ1Njcm9sbGJhcl06IFNjcm9sbFRpbWVsaW5lIGlzIG5vdCBhdHRhY2hlZCB0byB0aGUgd2luZG93IG9iamVjdC4nKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW05nU2Nyb2xsYmFyXTogRXJyb3IgbG9hZGluZyBTY3JvbGxUaW1lbGluZSBzY3JpcHQ6JywgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=